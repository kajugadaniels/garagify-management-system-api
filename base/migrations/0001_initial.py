# Generated by Django 5.0.7 on 2025-03-31 10:27

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(blank=True, max_length=255, null=True)),
                ('item_type', models.CharField(blank=True, choices=[('Spare Part', 'Spare Part'), ('Tools', 'Tools'), ('Materials', 'Materials')], max_length=30, null=True)),
                ('quantity', models.CharField(blank=True, max_length=255, null=True)),
                ('unit_price', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateField(default=django.utils.timezone.now)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Quotation of Item',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('make', models.CharField(blank=True, help_text='Manufacturer of the vehicle (e.g., Toyota, Ford, etc.).', max_length=100, null=True)),
                ('model', models.CharField(blank=True, help_text='Model of the vehicle (e.g., Camry, F-150, etc.).', max_length=100, null=True)),
                ('year', models.PositiveIntegerField(blank=True, help_text='Year the vehicle was manufactured.', null=True)),
                ('color', models.CharField(blank=True, help_text='Color of the vehicle.', max_length=50, null=True)),
                ('license_plate', models.CharField(blank=True, help_text='Unique license plate number of the vehicle.', max_length=20, null=True, unique=True)),
                ('vin', models.CharField(blank=True, help_text='Vehicle Identification Number (VIN).', max_length=50, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the vehicle record was created.', null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the vehicle record was last updated.', null=True)),
                ('customer', models.ForeignKey(help_text='The customer who owns the vehicle.', on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VehicleIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reported_issue', models.TextField(blank=True, help_text='Description of the issue as reported by the customer.', null=True)),
                ('diagnosed_issue', models.TextField(blank=True, help_text='Diagnosis details provided by a mechanic.', null=True)),
                ('repair_notes', models.TextField(blank=True, help_text='Notes regarding repair work performed on the vehicle.', null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Rejected', 'Rejected')], default='Pending', help_text='Current status of the vehicle issue.', max_length=20)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated cost for the repair work.', max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the issue was reported.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the issue details were last updated.')),
                ('vehicle', models.ForeignKey(blank=True, help_text='The vehicle that has the reported issue.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='base.vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle Issue',
                'verbose_name_plural': 'Vehicle Issues',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VehicleSolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solution_description', models.TextField(help_text='Detailed description of the repair solution provided.')),
                ('solution_date', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time when the solution was provided.')),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, help_text='The total cost incurred for the repair solution.', max_digits=10, null=True)),
                ('vehicle_issue', models.OneToOneField(help_text='The vehicle issue for which this solution is provided.', on_delete=django.db.models.deletion.CASCADE, related_name='solution', to='base.vehicleissue')),
            ],
            options={
                'verbose_name': 'Vehicle Solution',
                'verbose_name_plural': 'Vehicle Solutions',
                'ordering': ['-solution_date'],
            },
        ),
        migrations.CreateModel(
            name='SolutionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_used', models.PositiveIntegerField(help_text='The quantity of the inventory item used for the repair.')),
                ('item_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per unit of the inventory item at the time of usage.', max_digits=10, null=True)),
                ('inventory_item', models.ForeignKey(help_text='The inventory item used in the repair.', on_delete=django.db.models.deletion.PROTECT, to='base.inventory')),
                ('vehicle_solution', models.ForeignKey(help_text='The vehicle solution in which the inventory item was used.', on_delete=django.db.models.deletion.CASCADE, related_name='solution_items', to='base.vehiclesolution')),
            ],
            options={
                'verbose_name': 'Solution Item',
                'verbose_name_plural': 'Solution Items',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='VehicleSolutionMechanic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mechanic', models.ForeignKey(help_text="The mechanic assigned to the vehicle solution. The user should have a role of 'Mechanic'.", on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('vehicle_solution', models.ForeignKey(help_text='The vehicle solution to which this mechanic is assigned.', on_delete=django.db.models.deletion.CASCADE, related_name='mechanic_assignments', to='base.vehiclesolution')),
            ],
            options={
                'verbose_name': 'Vehicle Solution Mechanic',
                'verbose_name_plural': 'Vehicle Solution Mechanics',
                'ordering': ['id'],
                'unique_together': {('vehicle_solution', 'mechanic')},
            },
        ),
    ]
